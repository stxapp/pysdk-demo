{
  "config": {
    "indexing": "full",
    "lang": [
      "en"
    ],
    "min_search_length": 3,
    "prebuild_index": false,
    "separator": "[\\s\\-]+"
  },
  "docs": [
    {
      "location": "",
      "text": "Welcome to SportsX SDK Documentation \u00b6 Overview \u00b6 The STX SDK is a wrapper around the Sportsx Graphql APIs and Phoenix channels. The SDK provides object-oriented APIs to connect with the available Sportsx APIs and socket channels. Compatibility \u00b6 This library is compatible with the following versions of Python: 3.7 3.8 3.9 Installation \u00b6 Install the latest release via pip: pip install stx-pysdk",
      "title": "Home"
    },
    {
      "location": "#welcome-to-sportsx-sdk-documentation",
      "text": "",
      "title": "Welcome to SportsX SDK Documentation"
    },
    {
      "location": "#overview",
      "text": "The STX SDK is a wrapper around the Sportsx Graphql APIs and Phoenix channels. The SDK provides object-oriented APIs to connect with the available Sportsx APIs and socket channels.",
      "title": "Overview"
    },
    {
      "location": "#compatibility",
      "text": "This library is compatible with the following versions of Python: 3.7 3.8 3.9",
      "title": "Compatibility"
    },
    {
      "location": "#installation",
      "text": "Install the latest release via pip: pip install stx-pysdk",
      "title": "Installation"
    },
    {
      "location": "guide/",
      "text": "Developer Guide \u00b6 Synchronous Client - HTTP requests \u00b6 Initialization \u00b6 To initialize the client: examples/stxclient/init.py from stxsdk import StxClient client = StxClient () Authentication \u00b6 Before performing any operation you must authenticate first examples/stxclient/login.py from stxsdk import StxClient client = StxClient () email = \"<email address>\" password = \"<password>\" client . login ( params = { \"email\" : email , \"password\" : password }, ) The user token and refresh token validity is automatically handled by the client internally, and you don\"t need to worry about handling the authentication and authorization. For understanding the token expiry is 1 hour and refresh token expiry is 24 hours. 2 Factor Authentication \u00b6 If the 2FA is enabled, you must execute the confirm2fa to authenticate the user before calling any other operation, otherwise you will get the authentication failure response. examples/stxclient/confirm2FA.py from stxsdk import StxClient client = StxClient () email = \"<email address>\" password = \"<password>\" client . login ( params = { \"email\" : email , \"password\" : password }, ) # After login, if 2FA is enabled, you will receive the code on the requested email address client . confirm2Fa ( params = { \"code\" : \"865347\" , } ) User Profile \u00b6 To get the user profile details examples/stxclient/user_profile.py from stxsdk import StxClient , Selection client = StxClient () email = \"<email address>\" password = \"<password>\" client . login ( params = { \"email\" : email , \"password\" : password }, ) selections = Selection ( \"accountId\" , \"city\" , \"country\" , \"firstName\" , \"lastName\" , \"username\" , \"id\" , ) client . userProfile ( selections = selections ) Response { \"data\" : { \"userProfile\" : { \"accountId\" : \"6a7fb2e7-1413-4b8b-b126-6a8eaab128a8\" , \"city\" : \"New York\" , \"country\" : No ne , \"firstName\" : \"Muhamad\" , \"id\" : \"d9988022-037e-4441-8132-69d1bc58343f\" , \"lastName\" : \"Ali\" , \"username\" : \"Ali.Muhamad.86702\" }}, \"errors\" : No ne , \"message\" : \"Request Processed Successfully\" , \"success\" : True , } Utilities \u00b6 Here you can see a Selection object is being created to pass as an argument selections to the userProfile function. If you doesn't pass the selections, you will get all the fields in return by default. Selections parameter is used to pass the fields that you want in return from the APIs. Now the question is how would you know which fields are available in the response of the API. We have a utility method get_return_fields that takes the name of the operation as a string and returns all the available response values with their names and types. To get the return fields from stxsdk import StxClient client = StxClient () client . get_return_fields ( \"userProfile\" ) Response { \"accountId\" : \"rID\" , \"address1\" : \"String\" , \"address2\" : \"String\" , \"city\" : \"String\" , \"country\" : \"String\" , \"dateOfBirth\" : \"String\" , \"firstName\" : \"String!\" , \"id\" : \"rID!\" , \"industry\" : \"String\" , \"jobTitle\" : \"String\" , \"lastName\" : \"String!\" , \"optInMarketing\" : \"Boolean\" , \"phoneNumber\" : \"String\" , \"ssn\" : \"String\" , \"state\" : \"String\" , \"twoFactorAuth\" : \"Boolean\" , \"twoFactorAuthPerDevice\" : \"Boolean\" , \"username\" : \"String!\" , \"zipCode\" : \"String\" } Now what about the response with nested fields, checkout the following example: To get the return values with nested fields from stxsdk import StxClient client = StxClient () client . get_return_fields ( \"marketInfos\" ) Response { \"archived\" : \"Boolean\" , \"closedAt\" : \"String\" , \"description\" : \"String\" , \"detailedEventBrief\" : \"String\" , \"homeCategory\" : \"String\" , \"eventId\" : \"rID\" , \"eventStart\" : \"String\" , \"eventStatus\" : \"String\" , \"title\" : \"String\" , \"eventType\" : \"String\" , \"eventBrief\" : \"String\" , \"lastProbabilityAt\" : \"DateTime\" , \"lastTradedPrice\" : \"Int\" , \"manualProbability\" : \"Boolean\" , \"marketId\" : \"rID\" , \"maxPrice\" : \"Int\" , \"position\" : \"String\" , \"price\" : \"Float\" , \"priceChange24h\" : \"Int\" , \"probability\" : \"Float\" , \"question\" : \"String\" , \"result\" : \"String\" , \"shortTitle\" : \"String\" , \"rulesSpecifier\" : \"String\" , \"specifier\" : \"String\" , \"status\" : \"String\" , \"timestamp\" : \"String\" , \"timestampInt\" : \"Int\" , \"volume24h\" : \"Int\" , \"symbol\" : \"String\" , \"tradingFilters\" : { \"category\" : \"String\" , \"manual\" : \"Boolean\" , \"section\" : \"String\" , \"subcategory\" : \"String\" }, \"recentTrades\" : { \"liquidityTaker\" : \"String\" , \"price\" : \"Int\" , \"quantity\" : \"Int\" , \"timestamp\" : \"String\" , \"timestampInt\" : \"Int\" }, \"offers\" : { \"price\" : \"Int\" , \"quantity\" : \"Int\" }, \"orderPriceRules\" : { \"from\" : \"Int\" , \"inc\" : \"Int\" , \"to\" : \"Int\" }, \"filters\" : { \"category\" : \"String\" , \"manual\" : \"Boolean\" , \"section\" : \"String\" , \"subcategory\" : \"String\" }, \"bids\" : { \"price\" : \"Int\" , \"quantity\" : \"Int\" } } You will get two types of responses in return from any operation Success Response { # API respo nse , i t could be lis t or dic t io nar y \"data\" : {}, # i t would always be No ne i n case o f success \"errors\" : No ne , # Success Message \"message\" : \"Request Processed Successfully\" , # A boolea n f ield , would always be True i n case o f success respo nse \"success\" : True , } Failure Response { # i t would be No ne i n case o f fa ilure \"data\" : No ne , # i t would a lis t o f errors \"errors\" : [], # Ge neral fa ilure message \"message\" : \"Failed to process the request\" , # A boolea n f ield , would always be False i n case o f success respo nse \"success\" : False , } You can also use the following function to get the list of available operations To get the list of avaiable operations from stxsdk import StxClient client = StxClient () client . get_operations () Market Infos \u00b6 In the following example code you can see the usage of Selection object to set nested values examples/stxclient/market_info.py from stxsdk import StxClient , Selection client = StxClient () email = \"<email address>\" password = \"<password>\" client . login ( params = { \"email\" : email , \"password\" : password }, ) # you can create separate selection object and set them as keyword argument # or can create them inline # here created selection object for the field orderPriceRules and # pass it as keyword argument order_price_rules = Selection ( \"from\" , \"inc\" , \"to\" ) selections = Selection ( \"closedAt\" , \"description\" , \"eventId\" , \"marketId\" , \"title\" , \"status\" , orderPriceRules = order_price_rules , # inline selection object bids = Selection ( \"price\" , \"quantity\" ), ) client . marketInfos ( selections = selections ) Confirm Order \u00b6 examples/stxclient/confirm_order.py from stxsdk import StxClient , Selection client = StxClient () email = \"<email address>\" password = \"<password>\" client . login ( params = { \"email\" : email , \"password\" : password }, ) params = { \"userOrder\" : { \"marketId\" : \"ec202f18-cc6c-4fa2-90cb-f0c9162afced\" , # orderType: LIMIT | MARKET \"orderType\" : \"LIMIT\" , # action: BUY | SELL \"action\" : \"BUY\" , \"price\" : 1 , \"quantity\" : 5 , } } selections = Selection ( \"errors\" , order = Selection ( \"id\" , \"totalValue\" , \"status\" , \"action\" , \"clientOrderId\" ) ) client . confirmOrder ( params = params , selections = selections ) Cancel Order \u00b6 examples/stxclient/cancel_order.py from stxsdk import StxClient , Selection client = StxClient () email = \"<email address>\" password = \"<password>\" client . login ( params = { \"email\" : email , \"password\" : password }, ) params = { \"orderId\" : \"85b670f1-19b7-4378-8b91-6b4d7cc4a46b\" } selections = Selection ( \"status\" ) client . cancelOrder ( params = params , selections = selections ) Trade History \u00b6 examples/stxclient/trade_history.py from stxsdk import StxClient , Selection client = StxClient () email = \"<email address>\" password = \"<password>\" client . login ( params = { \"email\" : email , \"password\" : password }, ) selections = Selection ( \"totalCount\" , orders = Selection ( \"id\" , \"orderType\" , \"price\" , \"quantity\" , \"clientOrderId\" , \"totalValue\" , \"marketId\" , \"status\" , ), ) client . myOrderHistory ( selections = selections ) Asynchronous Client - Websocket requests \u00b6 This service provides the functionality to connect with the Sportsx phoenix channel via websockets. Available Channels \u00b6 Channel Description portfolio_join It delivers updates to users' available balance market_info_join It gives information about active markets active_trades_join It delivers information to the subscriber on a trade executed against an order that is filled against an active market in the system active_orders_join It delivers information to the subscriber on order that are filled against an active market in the system active_settlements_join It delivers information to the subscriber on a settlement recorded against on an account for an active market in the system. active_positions_join It delivers information to the subscriber on a position an account holds in an active market Initialization \u00b6 To initialize the client: examples/stxchannelclient/init.py email = \"<email address>\" password = \"<password>\" channel_client = StxChannelClient () channel_client . login ( params = { \"email\" : email , \"password\" : password }) Note First of all, needs to know that the User management is built on singleton approach, It means that no matter how many StxClient or StxChannelClient objects you create all of them will be sharing the same user object. It is required to have authentication before initiating the async client for building the connection with the channels. In the following example you can see I used asyncio library for async communication with channels asyncio is Python's builtin library to write concurrent code using the async/await syntax. You can learn more about asyncio on its official documentation What is Consumer? It's a function or service that would be triggered by the async client, means that the channels' message will automatically hand off to a message listener which passes to the consumer that has been registered. The client consumes the message when a session thread invokes the onMessage() method of the message listener object. Response Syntax \u00b6 Success Message { \"closed\" : False , \"message_received\" : True , \"message\" : \"Message received\" , # i t would a lis t co nta i n i n g message o f t he cha nnel \"data\" : [], } Below is the sample data of the portfolio channel Sample Message Response of the Channel [ \"3\" , No ne , \"portfolio:EY8Zk0HKYbaMsiG8id81MTE0V1D3\" , \"summary\" , { \"account_balance\" : 2000000 , \"account_id\" : \"6a7fb2e7-1413-4b8b-b126-6a8eaab128a8\" , \"available_balance\" : 2000000 , \"buy_order_liability\" : 0 , \"escrow\" : 0 , \"position_premium_liability\" : 0 , \"sell_order_liability\" : 0 , \"total_deposits\" : 2000000 , \"total_fees\" : 0 , \"total_settlement_pnl\" : 0 , \"total_withdrawals\" : 0 , \"user_id\" : \"ca84fb65-5df2-456b-80ec-903a068bbdd2\" } ] Portfolio Channel \u00b6 examples/stxchannelclient/portfolio.py import asyncio from examples.stxchannelclient.init import channel_client async def consumer ( response ): if response [ \"closed\" ]: print ( response [ \"message\" ]) elif response [ \"data\" ] is None : print ( \"No data return from server.\" ) else : print ( response [ \"data\" ][ 4 ]) async def read_portfolio (): await channel_client . portfolio_join ( consumer ) asyncio . run ( read_portfolio ()) Market Info Channel \u00b6 examples/stxchannelclient/market_info.py import asyncio from examples.stxchannelclient.init import channel_client async def consumer ( response ): if response [ \"closed\" ]: print ( response [ \"message\" ]) elif response [ \"data\" ] is None : print ( \"No data return from server.\" ) else : print ( response [ \"data\" ][ 4 ]) async def read_market_info (): await channel_client . market_info_join ( consumer ) asyncio . run ( read_market_info ()) Active Trades Channel \u00b6 examples/stxchannelclient/active_trade.py import asyncio from examples.stxchannelclient.init import channel_client async def consumer ( response ): if response [ \"closed\" ]: print ( response [ \"message\" ]) elif response [ \"data\" ] is None : print ( \"No data return from server.\" ) else : print ( response [ \"data\" ][ 4 ]) async def read_active_trades (): await channel_client . active_trades_join ( consumer ) asyncio . run ( read_active_trades ()) Active Orders Channel \u00b6 examples/stxchannelclient/active_order.py import asyncio from examples.stxchannelclient.init import channel_client async def consumer ( response ): if response [ \"closed\" ]: print ( response [ \"message\" ]) elif response [ \"data\" ] is None : print ( \"No data return from server.\" ) else : print ( response [ \"data\" ][ 4 ]) async def read_active_orders (): await channel_client . active_orders_join ( consumer ) asyncio . run ( read_active_orders ()) Active Settlement Channel \u00b6 examples/stxchannelclient/active_settlements.py import asyncio from examples.stxchannelclient.init import channel_client async def consumer ( response ): if response [ \"closed\" ]: print ( response [ \"message\" ]) elif response [ \"data\" ] is None : print ( \"No data return from server.\" ) else : print ( response [ \"data\" ][ 4 ]) async def read_active_settlements (): await channel_client . active_settlements_join ( consumer ) asyncio . run ( read_active_settlements ()) Active Positions Channel \u00b6 examples/stxchannelclient/active_positions.py import asyncio from examples.stxchannelclient.init import channel_client async def consumer ( response ): if response [ \"closed\" ]: print ( response [ \"message\" ]) elif response [ \"data\" ] is None : print ( \"No data return from server.\" ) else : print ( response [ \"data\" ][ 4 ]) async def read_active_positions (): await channel_client . active_positions_join ( consumer ) asyncio . run ( read_active_positions ())",
      "title": "Developer Guide"
    },
    {
      "location": "guide/#developer-guide",
      "text": "",
      "title": "Developer Guide"
    },
    {
      "location": "guide/#synchronous-client-http-requests",
      "text": "",
      "title": "Synchronous Client - HTTP requests"
    },
    {
      "location": "guide/#initialization",
      "text": "To initialize the client: examples/stxclient/init.py from stxsdk import StxClient client = StxClient ()",
      "title": "Initialization"
    },
    {
      "location": "guide/#authentication",
      "text": "Before performing any operation you must authenticate first examples/stxclient/login.py from stxsdk import StxClient client = StxClient () email = \"<email address>\" password = \"<password>\" client . login ( params = { \"email\" : email , \"password\" : password }, ) The user token and refresh token validity is automatically handled by the client internally, and you don\"t need to worry about handling the authentication and authorization. For understanding the token expiry is 1 hour and refresh token expiry is 24 hours.",
      "title": "Authentication"
    },
    {
      "location": "guide/#2-factor-authentication",
      "text": "If the 2FA is enabled, you must execute the confirm2fa to authenticate the user before calling any other operation, otherwise you will get the authentication failure response. examples/stxclient/confirm2FA.py from stxsdk import StxClient client = StxClient () email = \"<email address>\" password = \"<password>\" client . login ( params = { \"email\" : email , \"password\" : password }, ) # After login, if 2FA is enabled, you will receive the code on the requested email address client . confirm2Fa ( params = { \"code\" : \"865347\" , } )",
      "title": "2 Factor Authentication"
    },
    {
      "location": "guide/#user-profile",
      "text": "To get the user profile details examples/stxclient/user_profile.py from stxsdk import StxClient , Selection client = StxClient () email = \"<email address>\" password = \"<password>\" client . login ( params = { \"email\" : email , \"password\" : password }, ) selections = Selection ( \"accountId\" , \"city\" , \"country\" , \"firstName\" , \"lastName\" , \"username\" , \"id\" , ) client . userProfile ( selections = selections ) Response { \"data\" : { \"userProfile\" : { \"accountId\" : \"6a7fb2e7-1413-4b8b-b126-6a8eaab128a8\" , \"city\" : \"New York\" , \"country\" : No ne , \"firstName\" : \"Muhamad\" , \"id\" : \"d9988022-037e-4441-8132-69d1bc58343f\" , \"lastName\" : \"Ali\" , \"username\" : \"Ali.Muhamad.86702\" }}, \"errors\" : No ne , \"message\" : \"Request Processed Successfully\" , \"success\" : True , }",
      "title": "User Profile"
    },
    {
      "location": "guide/#utilities",
      "text": "Here you can see a Selection object is being created to pass as an argument selections to the userProfile function. If you doesn't pass the selections, you will get all the fields in return by default. Selections parameter is used to pass the fields that you want in return from the APIs. Now the question is how would you know which fields are available in the response of the API. We have a utility method get_return_fields that takes the name of the operation as a string and returns all the available response values with their names and types. To get the return fields from stxsdk import StxClient client = StxClient () client . get_return_fields ( \"userProfile\" ) Response { \"accountId\" : \"rID\" , \"address1\" : \"String\" , \"address2\" : \"String\" , \"city\" : \"String\" , \"country\" : \"String\" , \"dateOfBirth\" : \"String\" , \"firstName\" : \"String!\" , \"id\" : \"rID!\" , \"industry\" : \"String\" , \"jobTitle\" : \"String\" , \"lastName\" : \"String!\" , \"optInMarketing\" : \"Boolean\" , \"phoneNumber\" : \"String\" , \"ssn\" : \"String\" , \"state\" : \"String\" , \"twoFactorAuth\" : \"Boolean\" , \"twoFactorAuthPerDevice\" : \"Boolean\" , \"username\" : \"String!\" , \"zipCode\" : \"String\" } Now what about the response with nested fields, checkout the following example: To get the return values with nested fields from stxsdk import StxClient client = StxClient () client . get_return_fields ( \"marketInfos\" ) Response { \"archived\" : \"Boolean\" , \"closedAt\" : \"String\" , \"description\" : \"String\" , \"detailedEventBrief\" : \"String\" , \"homeCategory\" : \"String\" , \"eventId\" : \"rID\" , \"eventStart\" : \"String\" , \"eventStatus\" : \"String\" , \"title\" : \"String\" , \"eventType\" : \"String\" , \"eventBrief\" : \"String\" , \"lastProbabilityAt\" : \"DateTime\" , \"lastTradedPrice\" : \"Int\" , \"manualProbability\" : \"Boolean\" , \"marketId\" : \"rID\" , \"maxPrice\" : \"Int\" , \"position\" : \"String\" , \"price\" : \"Float\" , \"priceChange24h\" : \"Int\" , \"probability\" : \"Float\" , \"question\" : \"String\" , \"result\" : \"String\" , \"shortTitle\" : \"String\" , \"rulesSpecifier\" : \"String\" , \"specifier\" : \"String\" , \"status\" : \"String\" , \"timestamp\" : \"String\" , \"timestampInt\" : \"Int\" , \"volume24h\" : \"Int\" , \"symbol\" : \"String\" , \"tradingFilters\" : { \"category\" : \"String\" , \"manual\" : \"Boolean\" , \"section\" : \"String\" , \"subcategory\" : \"String\" }, \"recentTrades\" : { \"liquidityTaker\" : \"String\" , \"price\" : \"Int\" , \"quantity\" : \"Int\" , \"timestamp\" : \"String\" , \"timestampInt\" : \"Int\" }, \"offers\" : { \"price\" : \"Int\" , \"quantity\" : \"Int\" }, \"orderPriceRules\" : { \"from\" : \"Int\" , \"inc\" : \"Int\" , \"to\" : \"Int\" }, \"filters\" : { \"category\" : \"String\" , \"manual\" : \"Boolean\" , \"section\" : \"String\" , \"subcategory\" : \"String\" }, \"bids\" : { \"price\" : \"Int\" , \"quantity\" : \"Int\" } } You will get two types of responses in return from any operation Success Response { # API respo nse , i t could be lis t or dic t io nar y \"data\" : {}, # i t would always be No ne i n case o f success \"errors\" : No ne , # Success Message \"message\" : \"Request Processed Successfully\" , # A boolea n f ield , would always be True i n case o f success respo nse \"success\" : True , } Failure Response { # i t would be No ne i n case o f fa ilure \"data\" : No ne , # i t would a lis t o f errors \"errors\" : [], # Ge neral fa ilure message \"message\" : \"Failed to process the request\" , # A boolea n f ield , would always be False i n case o f success respo nse \"success\" : False , } You can also use the following function to get the list of available operations To get the list of avaiable operations from stxsdk import StxClient client = StxClient () client . get_operations ()",
      "title": "Utilities"
    },
    {
      "location": "guide/#market-infos",
      "text": "In the following example code you can see the usage of Selection object to set nested values examples/stxclient/market_info.py from stxsdk import StxClient , Selection client = StxClient () email = \"<email address>\" password = \"<password>\" client . login ( params = { \"email\" : email , \"password\" : password }, ) # you can create separate selection object and set them as keyword argument # or can create them inline # here created selection object for the field orderPriceRules and # pass it as keyword argument order_price_rules = Selection ( \"from\" , \"inc\" , \"to\" ) selections = Selection ( \"closedAt\" , \"description\" , \"eventId\" , \"marketId\" , \"title\" , \"status\" , orderPriceRules = order_price_rules , # inline selection object bids = Selection ( \"price\" , \"quantity\" ), ) client . marketInfos ( selections = selections )",
      "title": "Market Infos"
    },
    {
      "location": "guide/#confirm-order",
      "text": "examples/stxclient/confirm_order.py from stxsdk import StxClient , Selection client = StxClient () email = \"<email address>\" password = \"<password>\" client . login ( params = { \"email\" : email , \"password\" : password }, ) params = { \"userOrder\" : { \"marketId\" : \"ec202f18-cc6c-4fa2-90cb-f0c9162afced\" , # orderType: LIMIT | MARKET \"orderType\" : \"LIMIT\" , # action: BUY | SELL \"action\" : \"BUY\" , \"price\" : 1 , \"quantity\" : 5 , } } selections = Selection ( \"errors\" , order = Selection ( \"id\" , \"totalValue\" , \"status\" , \"action\" , \"clientOrderId\" ) ) client . confirmOrder ( params = params , selections = selections )",
      "title": "Confirm Order"
    },
    {
      "location": "guide/#cancel-order",
      "text": "examples/stxclient/cancel_order.py from stxsdk import StxClient , Selection client = StxClient () email = \"<email address>\" password = \"<password>\" client . login ( params = { \"email\" : email , \"password\" : password }, ) params = { \"orderId\" : \"85b670f1-19b7-4378-8b91-6b4d7cc4a46b\" } selections = Selection ( \"status\" ) client . cancelOrder ( params = params , selections = selections )",
      "title": "Cancel Order"
    },
    {
      "location": "guide/#trade-history",
      "text": "examples/stxclient/trade_history.py from stxsdk import StxClient , Selection client = StxClient () email = \"<email address>\" password = \"<password>\" client . login ( params = { \"email\" : email , \"password\" : password }, ) selections = Selection ( \"totalCount\" , orders = Selection ( \"id\" , \"orderType\" , \"price\" , \"quantity\" , \"clientOrderId\" , \"totalValue\" , \"marketId\" , \"status\" , ), ) client . myOrderHistory ( selections = selections )",
      "title": "Trade History"
    },
    {
      "location": "guide/#asynchronous-client-websocket-requests",
      "text": "This service provides the functionality to connect with the Sportsx phoenix channel via websockets.",
      "title": "Asynchronous Client - Websocket requests"
    },
    {
      "location": "guide/#available-channels",
      "text": "Channel Description portfolio_join It delivers updates to users' available balance market_info_join It gives information about active markets active_trades_join It delivers information to the subscriber on a trade executed against an order that is filled against an active market in the system active_orders_join It delivers information to the subscriber on order that are filled against an active market in the system active_settlements_join It delivers information to the subscriber on a settlement recorded against on an account for an active market in the system. active_positions_join It delivers information to the subscriber on a position an account holds in an active market",
      "title": "Available Channels"
    },
    {
      "location": "guide/#initialization_1",
      "text": "To initialize the client: examples/stxchannelclient/init.py email = \"<email address>\" password = \"<password>\" channel_client = StxChannelClient () channel_client . login ( params = { \"email\" : email , \"password\" : password }) Note First of all, needs to know that the User management is built on singleton approach, It means that no matter how many StxClient or StxChannelClient objects you create all of them will be sharing the same user object. It is required to have authentication before initiating the async client for building the connection with the channels. In the following example you can see I used asyncio library for async communication with channels asyncio is Python's builtin library to write concurrent code using the async/await syntax. You can learn more about asyncio on its official documentation What is Consumer? It's a function or service that would be triggered by the async client, means that the channels' message will automatically hand off to a message listener which passes to the consumer that has been registered. The client consumes the message when a session thread invokes the onMessage() method of the message listener object.",
      "title": "Initialization"
    },
    {
      "location": "guide/#response-syntax",
      "text": "Success Message { \"closed\" : False , \"message_received\" : True , \"message\" : \"Message received\" , # i t would a lis t co nta i n i n g message o f t he cha nnel \"data\" : [], } Below is the sample data of the portfolio channel Sample Message Response of the Channel [ \"3\" , No ne , \"portfolio:EY8Zk0HKYbaMsiG8id81MTE0V1D3\" , \"summary\" , { \"account_balance\" : 2000000 , \"account_id\" : \"6a7fb2e7-1413-4b8b-b126-6a8eaab128a8\" , \"available_balance\" : 2000000 , \"buy_order_liability\" : 0 , \"escrow\" : 0 , \"position_premium_liability\" : 0 , \"sell_order_liability\" : 0 , \"total_deposits\" : 2000000 , \"total_fees\" : 0 , \"total_settlement_pnl\" : 0 , \"total_withdrawals\" : 0 , \"user_id\" : \"ca84fb65-5df2-456b-80ec-903a068bbdd2\" } ]",
      "title": "Response Syntax"
    },
    {
      "location": "guide/#portfolio-channel",
      "text": "examples/stxchannelclient/portfolio.py import asyncio from examples.stxchannelclient.init import channel_client async def consumer ( response ): if response [ \"closed\" ]: print ( response [ \"message\" ]) elif response [ \"data\" ] is None : print ( \"No data return from server.\" ) else : print ( response [ \"data\" ][ 4 ]) async def read_portfolio (): await channel_client . portfolio_join ( consumer ) asyncio . run ( read_portfolio ())",
      "title": "Portfolio Channel"
    },
    {
      "location": "guide/#market-info-channel",
      "text": "examples/stxchannelclient/market_info.py import asyncio from examples.stxchannelclient.init import channel_client async def consumer ( response ): if response [ \"closed\" ]: print ( response [ \"message\" ]) elif response [ \"data\" ] is None : print ( \"No data return from server.\" ) else : print ( response [ \"data\" ][ 4 ]) async def read_market_info (): await channel_client . market_info_join ( consumer ) asyncio . run ( read_market_info ())",
      "title": "Market Info Channel"
    },
    {
      "location": "guide/#active-trades-channel",
      "text": "examples/stxchannelclient/active_trade.py import asyncio from examples.stxchannelclient.init import channel_client async def consumer ( response ): if response [ \"closed\" ]: print ( response [ \"message\" ]) elif response [ \"data\" ] is None : print ( \"No data return from server.\" ) else : print ( response [ \"data\" ][ 4 ]) async def read_active_trades (): await channel_client . active_trades_join ( consumer ) asyncio . run ( read_active_trades ())",
      "title": "Active Trades Channel"
    },
    {
      "location": "guide/#active-orders-channel",
      "text": "examples/stxchannelclient/active_order.py import asyncio from examples.stxchannelclient.init import channel_client async def consumer ( response ): if response [ \"closed\" ]: print ( response [ \"message\" ]) elif response [ \"data\" ] is None : print ( \"No data return from server.\" ) else : print ( response [ \"data\" ][ 4 ]) async def read_active_orders (): await channel_client . active_orders_join ( consumer ) asyncio . run ( read_active_orders ())",
      "title": "Active Orders Channel"
    },
    {
      "location": "guide/#active-settlement-channel",
      "text": "examples/stxchannelclient/active_settlements.py import asyncio from examples.stxchannelclient.init import channel_client async def consumer ( response ): if response [ \"closed\" ]: print ( response [ \"message\" ]) elif response [ \"data\" ] is None : print ( \"No data return from server.\" ) else : print ( response [ \"data\" ][ 4 ]) async def read_active_settlements (): await channel_client . active_settlements_join ( consumer ) asyncio . run ( read_active_settlements ())",
      "title": "Active Settlement Channel"
    },
    {
      "location": "guide/#active-positions-channel",
      "text": "examples/stxchannelclient/active_positions.py import asyncio from examples.stxchannelclient.init import channel_client async def consumer ( response ): if response [ \"closed\" ]: print ( response [ \"message\" ]) elif response [ \"data\" ] is None : print ( \"No data return from server.\" ) else : print ( response [ \"data\" ][ 4 ]) async def read_active_positions (): await channel_client . active_positions_join ( consumer ) asyncio . run ( read_active_positions ())",
      "title": "Active Positions Channel"
    },
    {
      "location": "quickstart/",
      "text": "Quick Start \u00b6 The SDK is composed of two key sections: Proxy (the classes providing the low-level functionality) Client (the services to be used for connectivity with the STX APIs). All you need to use is Client services for the integration with the APIs. There are two services available StxClient and StxChannelClient StxClient provides sync operations, while StxChannelClient provides connectivity with websocket channels. StxClient \u00b6 It provides the following operations: login confirm2Fa send2Fa logout updateProfile updateUserProfile confirmOrder cancelOrder cancelOrders cancelAllOrders userProfile marketFilterTree marketInfos marketSettlements accountMarketStats accountLimitsNumber accountLimitsHistoryNumber myDepositAndWithdrawalHistory myOrderHistory mySettlementsHistory myTradesForOrder myTradesHistory tradesForSettlement StxChannelClient \u00b6 It provides the following websocket APIs: portfolio_join market_info_join active_trades_join active_orders_join active_settlements_join active_positions_join",
      "title": "Quick Start"
    },
    {
      "location": "quickstart/#quick-start",
      "text": "The SDK is composed of two key sections: Proxy (the classes providing the low-level functionality) Client (the services to be used for connectivity with the STX APIs). All you need to use is Client services for the integration with the APIs. There are two services available StxClient and StxChannelClient StxClient provides sync operations, while StxChannelClient provides connectivity with websocket channels.",
      "title": "Quick Start"
    },
    {
      "location": "quickstart/#stxclient",
      "text": "It provides the following operations: login confirm2Fa send2Fa logout updateProfile updateUserProfile confirmOrder cancelOrder cancelOrders cancelAllOrders userProfile marketFilterTree marketInfos marketSettlements accountMarketStats accountLimitsNumber accountLimitsHistoryNumber myDepositAndWithdrawalHistory myOrderHistory mySettlementsHistory myTradesForOrder myTradesHistory tradesForSettlement",
      "title": "StxClient"
    },
    {
      "location": "quickstart/#stxchannelclient",
      "text": "It provides the following websocket APIs: portfolio_join market_info_join active_trades_join active_orders_join active_settlements_join active_positions_join",
      "title": "StxChannelClient"
    }
  ]
}